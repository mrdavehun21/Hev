<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        #map {
            height: 100vh;
            width: 100%;
        }
        body {
            margin: 0;
        }
        .menu-items {
            text-decoration: none;
            font-size: 25px;
            color: #108541;
            text-align: center;
            padding: 2px;
            display: block;
        }
    </style>
</head>
<body>
    
    <div id="map"></div>
    <div class="leaflet-top leaflet-right">
        <div class="leaflet-control-layers leaflet-control" aria-haspopup="true">
            <a class="menu-items" href="/home">FÅ‘oldal</a>
            <hr>
            <a class="menu-items" href="/home/vonatokH5">H5</a>
        </div>        
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    
    <script>
        var map = L.map('map').setView([47.575247, 19.068515], 12);

        // Define the tile layer
        var tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

        // Create a layer group for markers and polylines
        var overlayGroup = L.layerGroup().addTo(map);

        function fetchData() {
            fetch('/home/map', { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(response => response.json())
                .then(data => {
                    // Clear all layers in the overlay group
                    overlayGroup.clearLayers();

                    // Add markers for hevs
                    data.H5.forEach(vehicle => {
                        const [part1, part2] = vehicle.licensePlate.split("-");
                        const items = data.licensePlates.filter(item => item.palyaszam.includes(part1) || item.palyaszam.includes(part2));
                        let direction = vehicle.bearing || 0;

                        if (items.length > 0) {
                            const palyaszamFormatted = items.map(item => `${item.palyaszam[0]}-${item.palyaszam[1]}`).join(' ');
                            let route = vehicle.routeId.replace(/^BKK_/, '');
                            const popupContent = `<div>
                                                    <span>${route}</span> > <span>${vehicle.tripHeadsign}</span>
                                                    <hr>
                                                    <strong style="text-align: right;">${palyaszamFormatted}</strong>
                                                </div>`;

                            var marker = L.marker([vehicle.location.lat, vehicle.location.lon], { icon: L.divIcon({
                                            className: 'custom-marker',
                                            html: `<svg width="26" height="32" viewBox="0 0 26 32" fill="none" xmlns="http://www.w3.org/2000/svg" style="transform: rotate(${direction}deg);">
                                                <path d="M23.9395 18.7344C23.9395 24.8689 18.8493 29.959 12.7148 29.959C6.5909 29.959 1.5 24.8696 1.5 18.7344C1.5 12.6082 6.58187 7.51953 12.7051 7.51953C18.8418 7.51953 23.9395 12.6119 23.9395 18.7344Z" fill="white" stroke="#8A236C" stroke-width="3"/>
                                                <path d="M21 6L15 4.875L13 4.5L11 4.875L5 6L13 0L21 6Z" fill="black"/>
                                                </svg>`,
                                            iconSize: [26, 32]
                                        })
                            })
                                .bindPopup(popupContent);
                            marker.addTo(overlayGroup);

                            var latlngs = data.latlngs.map(coord => L.latLng(coord[0], coord[1]));
                            var polyline = L.polyline(latlngs, { color: '#8A236C' });
                            polyline.addTo(overlayGroup);
                        }   
                    });
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }

        window.onload = function () {
            fetchData();
            setInterval(fetchData, 30000);
        };
    </script>
</body>
</html>
